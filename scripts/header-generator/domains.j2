{% macro camelCase(text) %}{{ text.split('_')[0] }}{{text.split('_')[1:]|map('capitalize')|join }}{% endmacro %}
{% macro CamelCase(text) %}{{ text.split('_')|map('capitalize')|join }}{% endmacro %}
#pragma once

#include <optional>

#include <nlohmann/json.hpp>

#include "../HAEntity.hpp"

using json = nlohmann::json;
using std::optional;

#if 0
enum class EntityType
{
{%- for domain in result.keys() %}
  {{ domain | title }},
{%- endfor %}
  OTHER,
};
#endif

namespace HADomains
{
{% for domain, services in result.items() %}
// START HEADER FOR {{ CamelCase(domain) }}

class {{ CamelCase(domain) }}
{
public:
  {{ CamelCase(domain) }}(std::shared_ptr<HAEntity> _entity) :
    entity(_entity) {}

  // const EntityType __domain = EntityType::{{ domain | title }};
{%- for name, desc in services.items() %}
  // {{ desc.name }}
  // {{ desc.description }}
  struct {{ CamelCase(name) }}Args
  {
{%- for field in desc.fields.keys() %}
    optional<json> {{ field }};
{%- endfor %}
  };
  void {% if name == 'delete' %}_{% endif %}{{ camelCase(name) }}([[maybe_unused]] const {{ CamelCase(name) }}Args& _args)
  {
    json cmd;

    cmd["type"] = "call_service";
    cmd["domain"] = "{{ domain }}";
    cmd["service"] = "{{ name }}";
    cmd["target"]["entity_id"] = entity->id;

{%- for field in desc.fields.keys() %}
    if (_args.{{ field }}) {
      cmd["service_data"]["{{ field }}"] = *_args.{{ field }};
    }
{%- endfor %}

    entity->WSConnSend(cmd);
  }
{% endfor %}
private:
  std::shared_ptr<HAEntity> entity;
};
{% endfor %}
}
